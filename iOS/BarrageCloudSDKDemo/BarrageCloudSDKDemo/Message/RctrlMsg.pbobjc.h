// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RctrlMsg.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class RctrlMsg;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum MsgType

typedef GPB_ENUM(MsgType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  MsgType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  MsgType_UnknownType = 0,
  MsgType_MouseEventType = 1001,
  MsgType_KeyboardEventType = 1002,
};

GPBEnumDescriptor *MsgType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL MsgType_IsValidValue(int32_t value);

#pragma mark - Enum MouseEventType

typedef GPB_ENUM(MouseEventType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  MouseEventType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  MouseEventType_MouseEventUnknown = 0,
  MouseEventType_MouseEventMove = 1,
  MouseEventType_MouseEventLbuttonDown = 2,
  MouseEventType_MouseEventLbuttonUp = 3,
  MouseEventType_MouseEventRbuttonDown = 4,
  MouseEventType_MouseEventRbuttonUp = 5,
  MouseEventType_MouseEventMbuttonDown = 6,
  MouseEventType_MouseEventMbuttonUp = 7,
  MouseEventType_MouseEventWheel = 8,
  MouseEventType_MouseEventXbuttonDown = 9,
  MouseEventType_MouseEventXbuttonUp = 10,
  MouseEventType_MouseEventHwheel = 11,
};

GPBEnumDescriptor *MouseEventType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL MouseEventType_IsValidValue(int32_t value);

#pragma mark - Enum MouseEventFlag

typedef GPB_ENUM(MouseEventFlag) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  MouseEventFlag_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  MouseEventFlag_MouseEventFlagNone = 0,
  MouseEventFlag_MouseEventFlagLbutton = 1,
  MouseEventFlag_MouseEventFlagRbutton = 2,
  MouseEventFlag_MouseEventFlagShift = 4,
  MouseEventFlag_MouseEventFlagControl = 8,
  MouseEventFlag_MouseEventFlagMbutton = 16,
  MouseEventFlag_MouseEventFlagXbutton1 = 32,
  MouseEventFlag_MouseEventFlagXbutton2 = 64,
};

GPBEnumDescriptor *MouseEventFlag_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL MouseEventFlag_IsValidValue(int32_t value);

#pragma mark - Enum KeyboardEventType

typedef GPB_ENUM(KeyboardEventType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  KeyboardEventType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  KeyboardEventType_KeyboardEventUnknown = 0,
  KeyboardEventType_KeyboardEventKeyDown = 1,
  KeyboardEventType_KeyboardEventKeyUp = 2,
  KeyboardEventType_KeyboardEventKeyChar = 3,
};

GPBEnumDescriptor *KeyboardEventType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL KeyboardEventType_IsValidValue(int32_t value);

#pragma mark - RctrlMsgRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface RctrlMsgRoot : GPBRootObject
@end

#pragma mark - RctrlMsg

typedef GPB_ENUM(RctrlMsg_FieldNumber) {
  RctrlMsg_FieldNumber_Type = 1,
  RctrlMsg_FieldNumber_Version = 2,
  RctrlMsg_FieldNumber_MsgId = 3,
  RctrlMsg_FieldNumber_Timestamp = 4,
  RctrlMsg_FieldNumber_Payload = 5,
};

GPB_FINAL @interface RctrlMsg : GPBMessage

@property(nonatomic, readwrite) MsgType type;

@property(nonatomic, readwrite) int32_t version;

@property(nonatomic, readwrite) uint32_t msgId;

@property(nonatomic, readwrite) uint64_t timestamp;

@property(nonatomic, readwrite, copy, null_resettable) NSData *payload;

@end

/**
 * Fetches the raw value of a @c RctrlMsg's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t RctrlMsg_Type_RawValue(RctrlMsg *message);
/**
 * Sets the raw value of an @c RctrlMsg's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRctrlMsg_Type_RawValue(RctrlMsg *message, int32_t value);

#pragma mark - RctrlMsges

typedef GPB_ENUM(RctrlMsges_FieldNumber) {
  RctrlMsges_FieldNumber_MsgesArray = 1,
};

GPB_FINAL @interface RctrlMsges : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<RctrlMsg*> *msgesArray;
/** The number of items in @c msgesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger msgesArray_Count;

@end

#pragma mark - MouseEventMsg

typedef GPB_ENUM(MouseEventMsg_FieldNumber) {
  MouseEventMsg_FieldNumber_MouseEvent = 1,
  MouseEventMsg_FieldNumber_X = 2,
  MouseEventMsg_FieldNumber_Y = 3,
  MouseEventMsg_FieldNumber_ExtData = 4,
};

/**
 * extData for MOUSE_EVENT_WHEEL, high 16 bits is delta, low 16 bits is state
 * extData low 16 bits is combined key state
 **/
GPB_FINAL @interface MouseEventMsg : GPBMessage

@property(nonatomic, readwrite) uint32_t mouseEvent;

@property(nonatomic, readwrite) int32_t x;

@property(nonatomic, readwrite) int32_t y;

@property(nonatomic, readwrite) int32_t extData;

@end

#pragma mark - KeyboardEventMsg

typedef GPB_ENUM(KeyboardEventMsg_FieldNumber) {
  KeyboardEventMsg_FieldNumber_KeyboardEvent = 1,
  KeyboardEventMsg_FieldNumber_Vkey = 2,
  KeyboardEventMsg_FieldNumber_State = 3,
};

/**
 * vkey is vitual key code,
 * see https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes
 * state is key repeat count, scan code and flags, see https://learn.microsoft.com/en-us/windows/win32/inputdev/wm-keydown
 * and see: https://learn.microsoft.com/en-us/windows/win32/inputdev/about-keyboard-input#keystroke-message-flags
 * vkey and state may be generated by external tools, and mapped with mobile-phone app button, and configed in DB
 **/
GPB_FINAL @interface KeyboardEventMsg : GPBMessage

@property(nonatomic, readwrite) uint32_t keyboardEvent;

@property(nonatomic, readwrite) uint32_t vkey;

@property(nonatomic, readwrite) uint32_t state;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
