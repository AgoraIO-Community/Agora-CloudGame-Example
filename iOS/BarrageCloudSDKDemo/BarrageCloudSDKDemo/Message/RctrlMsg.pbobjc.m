// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RctrlMsg.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "RctrlMsg.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(RctrlMsg);

#pragma mark - RctrlMsgRoot

@implementation RctrlMsgRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - RctrlMsgRoot_FileDescriptor

static GPBFileDescriptor *RctrlMsgRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"agora.pb.rctrl"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum MsgType

GPBEnumDescriptor *MsgType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UnknownType\000MouseEventType\000KeyboardEvent"
        "Type\000";
    static const int32_t values[] = {
        MsgType_UnknownType,
        MsgType_MouseEventType,
        MsgType_KeyboardEventType,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MsgType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MsgType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
//      [worker release];
    }
  }
  return descriptor;
}

BOOL MsgType_IsValidValue(int32_t value__) {
  switch (value__) {
    case MsgType_UnknownType:
    case MsgType_MouseEventType:
    case MsgType_KeyboardEventType:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum MouseEventType

GPBEnumDescriptor *MouseEventType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MouseEventUnknown\000MouseEventMove\000MouseEv"
        "entLbuttonDown\000MouseEventLbuttonUp\000Mouse"
        "EventRbuttonDown\000MouseEventRbuttonUp\000Mou"
        "seEventMbuttonDown\000MouseEventMbuttonUp\000M"
        "ouseEventWheel\000MouseEventXbuttonDown\000Mou"
        "seEventXbuttonUp\000MouseEventHwheel\000";
    static const int32_t values[] = {
        MouseEventType_MouseEventUnknown,
        MouseEventType_MouseEventMove,
        MouseEventType_MouseEventLbuttonDown,
        MouseEventType_MouseEventLbuttonUp,
        MouseEventType_MouseEventRbuttonDown,
        MouseEventType_MouseEventRbuttonUp,
        MouseEventType_MouseEventMbuttonDown,
        MouseEventType_MouseEventMbuttonUp,
        MouseEventType_MouseEventWheel,
        MouseEventType_MouseEventXbuttonDown,
        MouseEventType_MouseEventXbuttonUp,
        MouseEventType_MouseEventHwheel,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MouseEventType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MouseEventType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
//      [worker release];
    }
  }
  return descriptor;
}

BOOL MouseEventType_IsValidValue(int32_t value__) {
  switch (value__) {
    case MouseEventType_MouseEventUnknown:
    case MouseEventType_MouseEventMove:
    case MouseEventType_MouseEventLbuttonDown:
    case MouseEventType_MouseEventLbuttonUp:
    case MouseEventType_MouseEventRbuttonDown:
    case MouseEventType_MouseEventRbuttonUp:
    case MouseEventType_MouseEventMbuttonDown:
    case MouseEventType_MouseEventMbuttonUp:
    case MouseEventType_MouseEventWheel:
    case MouseEventType_MouseEventXbuttonDown:
    case MouseEventType_MouseEventXbuttonUp:
    case MouseEventType_MouseEventHwheel:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum MouseEventFlag

GPBEnumDescriptor *MouseEventFlag_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MouseEventFlagNone\000MouseEventFlagLbutton"
        "\000MouseEventFlagRbutton\000MouseEventFlagShi"
        "ft\000MouseEventFlagControl\000MouseEventFlagM"
        "button\000MouseEventFlagXbutton1\000MouseEvent"
        "FlagXbutton2\000";
    static const int32_t values[] = {
        MouseEventFlag_MouseEventFlagNone,
        MouseEventFlag_MouseEventFlagLbutton,
        MouseEventFlag_MouseEventFlagRbutton,
        MouseEventFlag_MouseEventFlagShift,
        MouseEventFlag_MouseEventFlagControl,
        MouseEventFlag_MouseEventFlagMbutton,
        MouseEventFlag_MouseEventFlagXbutton1,
        MouseEventFlag_MouseEventFlagXbutton2,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MouseEventFlag)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MouseEventFlag_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
//      [worker release];
    }
  }
  return descriptor;
}

BOOL MouseEventFlag_IsValidValue(int32_t value__) {
  switch (value__) {
    case MouseEventFlag_MouseEventFlagNone:
    case MouseEventFlag_MouseEventFlagLbutton:
    case MouseEventFlag_MouseEventFlagRbutton:
    case MouseEventFlag_MouseEventFlagShift:
    case MouseEventFlag_MouseEventFlagControl:
    case MouseEventFlag_MouseEventFlagMbutton:
    case MouseEventFlag_MouseEventFlagXbutton1:
    case MouseEventFlag_MouseEventFlagXbutton2:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum KeyboardEventType

GPBEnumDescriptor *KeyboardEventType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "KeyboardEventUnknown\000KeyboardEventKeyDow"
        "n\000KeyboardEventKeyUp\000KeyboardEventKeyCha"
        "r\000";
    static const int32_t values[] = {
        KeyboardEventType_KeyboardEventUnknown,
        KeyboardEventType_KeyboardEventKeyDown,
        KeyboardEventType_KeyboardEventKeyUp,
        KeyboardEventType_KeyboardEventKeyChar,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(KeyboardEventType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:KeyboardEventType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
//      [worker release];
    }
  }
  return descriptor;
}

BOOL KeyboardEventType_IsValidValue(int32_t value__) {
  switch (value__) {
    case KeyboardEventType_KeyboardEventUnknown:
    case KeyboardEventType_KeyboardEventKeyDown:
    case KeyboardEventType_KeyboardEventKeyUp:
    case KeyboardEventType_KeyboardEventKeyChar:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - RctrlMsg

@implementation RctrlMsg

@dynamic type;
@dynamic version;
@dynamic msgId;
@dynamic timestamp;
@dynamic payload;

typedef struct RctrlMsg__storage_ {
  uint32_t _has_storage_[1];
  MsgType type;
  int32_t version;
  uint32_t msgId;
  NSData *payload;
  uint64_t timestamp;
} RctrlMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = MsgType_EnumDescriptor,
        .number = RctrlMsg_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RctrlMsg__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = RctrlMsg_FieldNumber_Version,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RctrlMsg__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.clazz = Nil,
        .number = RctrlMsg_FieldNumber_MsgId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RctrlMsg__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = RctrlMsg_FieldNumber_Timestamp,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RctrlMsg__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "payload",
        .dataTypeSpecific.clazz = Nil,
        .number = RctrlMsg_FieldNumber_Payload,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RctrlMsg__storage_, payload),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RctrlMsg class]
                                     rootClass:[RctrlMsgRoot class]
                                          file:RctrlMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RctrlMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RctrlMsg_Type_RawValue(RctrlMsg *message) {
  GPBDescriptor *descriptor = [RctrlMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RctrlMsg_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetRctrlMsg_Type_RawValue(RctrlMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [RctrlMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RctrlMsg_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - RctrlMsges

@implementation RctrlMsges

@dynamic msgesArray, msgesArray_Count;

typedef struct RctrlMsges__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *msgesArray;
} RctrlMsges__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(RctrlMsg),
        .number = RctrlMsges_FieldNumber_MsgesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RctrlMsges__storage_, msgesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RctrlMsges class]
                                     rootClass:[RctrlMsgRoot class]
                                          file:RctrlMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RctrlMsges__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MouseEventMsg

@implementation MouseEventMsg

@dynamic mouseEvent;
@dynamic x;
@dynamic y;
@dynamic extData;

typedef struct MouseEventMsg__storage_ {
  uint32_t _has_storage_[1];
  uint32_t mouseEvent;
  int32_t x;
  int32_t y;
  int32_t extData;
} MouseEventMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mouseEvent",
        .dataTypeSpecific.clazz = Nil,
        .number = MouseEventMsg_FieldNumber_MouseEvent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MouseEventMsg__storage_, mouseEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "x",
        .dataTypeSpecific.clazz = Nil,
        .number = MouseEventMsg_FieldNumber_X,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MouseEventMsg__storage_, x),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "y",
        .dataTypeSpecific.clazz = Nil,
        .number = MouseEventMsg_FieldNumber_Y,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MouseEventMsg__storage_, y),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "extData",
        .dataTypeSpecific.clazz = Nil,
        .number = MouseEventMsg_FieldNumber_ExtData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MouseEventMsg__storage_, extData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MouseEventMsg class]
                                     rootClass:[RctrlMsgRoot class]
                                          file:RctrlMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MouseEventMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\n\000\004\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyboardEventMsg

@implementation KeyboardEventMsg

@dynamic keyboardEvent;
@dynamic vkey;
@dynamic state;

typedef struct KeyboardEventMsg__storage_ {
  uint32_t _has_storage_[1];
  uint32_t keyboardEvent;
  uint32_t vkey;
  uint32_t state;
} KeyboardEventMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyboardEvent",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyboardEventMsg_FieldNumber_KeyboardEvent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyboardEventMsg__storage_, keyboardEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "vkey",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyboardEventMsg_FieldNumber_Vkey,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KeyboardEventMsg__storage_, vkey),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "state",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyboardEventMsg_FieldNumber_State,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(KeyboardEventMsg__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyboardEventMsg class]
                                     rootClass:[RctrlMsgRoot class]
                                          file:RctrlMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyboardEventMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
